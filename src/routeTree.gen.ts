/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './app/__root'
import { Route as authLayoutRouteImport } from './app/(auth)/_layout'
import { Route as appLayoutRouteImport } from './app/(app)/_layout'
import { Route as appIndexRouteImport } from './app/(app)/index'
import { Route as appExploreRouteImport } from './app/(app)/explore'
import { Route as authRegisterLayoutRouteImport } from './app/(auth)/register/_layout'
import { Route as authLoginLayoutRouteImport } from './app/(auth)/login/_layout'
import { Route as authRegisterIndexRouteImport } from './app/(auth)/register/index'

const authLoginIndexLazyRouteImport = createFileRoute('/(auth)/login/')()
const authLoginResetPasswordLazyRouteImport = createFileRoute(
  '/(auth)/login/reset-password',
)()
const authLoginForgotPasswordLazyRouteImport = createFileRoute(
  '/(auth)/login/forgot-password',
)()

const authLayoutRoute = authLayoutRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const appLayoutRoute = appLayoutRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appLayoutRoute,
} as any)
const appExploreRoute = appExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => appLayoutRoute,
} as any)
const authRegisterLayoutRoute = authRegisterLayoutRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginLayoutRoute = authLoginLayoutRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)
const authLoginIndexLazyRoute = authLoginIndexLazyRouteImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => authLoginLayoutRoute,
  } as any)
  .lazy(() => import('./app/(auth)/login/index.lazy').then((d) => d.Route))
const authRegisterIndexRoute = authRegisterIndexRouteImport
  .update({
    id: '/',
    path: '/',
    getParentRoute: () => authRegisterLayoutRoute,
  } as any)
  .lazy(() => import('./app/(auth)/register/index.lazy').then((d) => d.Route))
const authLoginResetPasswordLazyRoute = authLoginResetPasswordLazyRouteImport
  .update({
    id: '/reset-password',
    path: '/reset-password',
    getParentRoute: () => authLoginLayoutRoute,
  } as any)
  .lazy(() =>
    import('./app/(auth)/login/reset-password.lazy').then((d) => d.Route),
  )
const authLoginForgotPasswordLazyRoute = authLoginForgotPasswordLazyRouteImport
  .update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => authLoginLayoutRoute,
  } as any)
  .lazy(() =>
    import('./app/(auth)/login/forgot-password.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/login': typeof authLoginLayoutRouteWithChildren
  '/register': typeof authRegisterLayoutRouteWithChildren
  '/explore': typeof appExploreRoute
  '/login/forgot-password': typeof authLoginForgotPasswordLazyRoute
  '/login/reset-password': typeof authLoginResetPasswordLazyRoute
  '/register/': typeof authRegisterIndexRoute
  '/login/': typeof authLoginIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/explore': typeof appExploreRoute
  '/login/forgot-password': typeof authLoginForgotPasswordLazyRoute
  '/login/reset-password': typeof authLoginResetPasswordLazyRoute
  '/register': typeof authRegisterIndexRoute
  '/login': typeof authLoginIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appLayoutRouteWithChildren
  '/(auth)': typeof authLayoutRouteWithChildren
  '/(auth)/login': typeof authLoginLayoutRouteWithChildren
  '/(auth)/register': typeof authRegisterLayoutRouteWithChildren
  '/(app)/explore': typeof appExploreRoute
  '/(app)/': typeof appIndexRoute
  '/(auth)/login/forgot-password': typeof authLoginForgotPasswordLazyRoute
  '/(auth)/login/reset-password': typeof authLoginResetPasswordLazyRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/(auth)/login/': typeof authLoginIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/explore'
    | '/login/forgot-password'
    | '/login/reset-password'
    | '/register/'
    | '/login/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/explore'
    | '/login/forgot-password'
    | '/login/reset-password'
    | '/register'
    | '/login'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(app)/explore'
    | '/(app)/'
    | '/(auth)/login/forgot-password'
    | '/(auth)/login/reset-password'
    | '/(auth)/register/'
    | '/(auth)/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appLayoutRoute: typeof appLayoutRouteWithChildren
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(app)/explore': {
      id: '/(app)/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof appExploreRouteImport
      parentRoute: typeof appLayoutRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterLayoutRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLayoutRouteImport
      parentRoute: typeof authLayoutRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof authLoginIndexLazyRouteImport
      parentRoute: typeof authLoginLayoutRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/'
      fullPath: '/register/'
      preLoaderRoute: typeof authRegisterIndexRouteImport
      parentRoute: typeof authRegisterLayoutRoute
    }
    '/(auth)/login/reset-password': {
      id: '/(auth)/login/reset-password'
      path: '/reset-password'
      fullPath: '/login/reset-password'
      preLoaderRoute: typeof authLoginResetPasswordLazyRouteImport
      parentRoute: typeof authLoginLayoutRoute
    }
    '/(auth)/login/forgot-password': {
      id: '/(auth)/login/forgot-password'
      path: '/forgot-password'
      fullPath: '/login/forgot-password'
      preLoaderRoute: typeof authLoginForgotPasswordLazyRouteImport
      parentRoute: typeof authLoginLayoutRoute
    }
  }
}

interface appLayoutRouteChildren {
  appExploreRoute: typeof appExploreRoute
  appIndexRoute: typeof appIndexRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appExploreRoute: appExploreRoute,
  appIndexRoute: appIndexRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface authLoginLayoutRouteChildren {
  authLoginForgotPasswordLazyRoute: typeof authLoginForgotPasswordLazyRoute
  authLoginResetPasswordLazyRoute: typeof authLoginResetPasswordLazyRoute
  authLoginIndexLazyRoute: typeof authLoginIndexLazyRoute
}

const authLoginLayoutRouteChildren: authLoginLayoutRouteChildren = {
  authLoginForgotPasswordLazyRoute: authLoginForgotPasswordLazyRoute,
  authLoginResetPasswordLazyRoute: authLoginResetPasswordLazyRoute,
  authLoginIndexLazyRoute: authLoginIndexLazyRoute,
}

const authLoginLayoutRouteWithChildren = authLoginLayoutRoute._addFileChildren(
  authLoginLayoutRouteChildren,
)

interface authRegisterLayoutRouteChildren {
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

const authRegisterLayoutRouteChildren: authRegisterLayoutRouteChildren = {
  authRegisterIndexRoute: authRegisterIndexRoute,
}

const authRegisterLayoutRouteWithChildren =
  authRegisterLayoutRoute._addFileChildren(authRegisterLayoutRouteChildren)

interface authLayoutRouteChildren {
  authLoginLayoutRoute: typeof authLoginLayoutRouteWithChildren
  authRegisterLayoutRoute: typeof authRegisterLayoutRouteWithChildren
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginLayoutRoute: authLoginLayoutRouteWithChildren,
  authRegisterLayoutRoute: authRegisterLayoutRouteWithChildren,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appLayoutRoute: appLayoutRouteWithChildren,
  authLayoutRoute: authLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
